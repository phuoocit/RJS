{"ast":null,"code":"var token = /d{1,4}|D{3,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\\1?|W{1,2}|[LlopSZN]|\"[^\"]*\"|'[^']*'/g;\nvar timezone = /\\b(?:[A-Z]{1,3}[A-Z][TC])(?:[-+]\\d{4})?|((?:Australian )?(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time)\\b/g;\nvar timezoneClip = /[^-+\\dA-Z]/g;\nexport default function dateFormat(date, mask, utc, gmt) {\n  if (arguments.length === 1 && typeof date === \"string\" && !/\\d/.test(date)) {\n    mask = date;\n    date = undefined;\n  }\n\n  date = date || date === 0 ? date : new Date();\n\n  if (!(date instanceof Date)) {\n    date = new Date(date);\n  }\n\n  if (isNaN(date)) {\n    throw TypeError(\"Invalid date\");\n  }\n\n  mask = String(masks[mask] || mask || masks[\"default\"]);\n  var maskSlice = mask.slice(0, 4);\n\n  if (maskSlice === \"UTC:\" || maskSlice === \"GMT:\") {\n    mask = mask.slice(4);\n    utc = true;\n\n    if (maskSlice === \"GMT:\") {\n      gmt = true;\n    }\n  }\n\n  var _ = function _() {\n    return utc ? \"getUTC\" : \"get\";\n  };\n\n  var _d = function d() {\n    return date[_() + \"Date\"]();\n  };\n\n  var D = function D() {\n    return date[_() + \"Day\"]();\n  };\n\n  var _m = function m() {\n    return date[_() + \"Month\"]();\n  };\n\n  var y = function y() {\n    return date[_() + \"FullYear\"]();\n  };\n\n  var _H = function H() {\n    return date[_() + \"Hours\"]();\n  };\n\n  var _M = function M() {\n    return date[_() + \"Minutes\"]();\n  };\n\n  var _s = function s() {\n    return date[_() + \"Seconds\"]();\n  };\n\n  var _L = function L() {\n    return date[_() + \"Milliseconds\"]();\n  };\n\n  var _o = function o() {\n    return utc ? 0 : date.getTimezoneOffset();\n  };\n\n  var _W = function W() {\n    return getWeek(date);\n  };\n\n  var _N = function N() {\n    return getDayOfWeek(date);\n  };\n\n  var flags = {\n    d: function d() {\n      return _d();\n    },\n    dd: function dd() {\n      return pad(_d());\n    },\n    ddd: function ddd() {\n      return i18n.dayNames[D()];\n    },\n    DDD: function DDD() {\n      return getDayName({\n        y: y(),\n        m: _m(),\n        d: _d(),\n        _: _(),\n        dayName: i18n.dayNames[D()],\n        short: true\n      });\n    },\n    dddd: function dddd() {\n      return i18n.dayNames[D() + 7];\n    },\n    DDDD: function DDDD() {\n      return getDayName({\n        y: y(),\n        m: _m(),\n        d: _d(),\n        _: _(),\n        dayName: i18n.dayNames[D() + 7]\n      });\n    },\n    m: function m() {\n      return _m() + 1;\n    },\n    mm: function mm() {\n      return pad(_m() + 1);\n    },\n    mmm: function mmm() {\n      return i18n.monthNames[_m()];\n    },\n    mmmm: function mmmm() {\n      return i18n.monthNames[_m() + 12];\n    },\n    yy: function yy() {\n      return String(y()).slice(2);\n    },\n    yyyy: function yyyy() {\n      return pad(y(), 4);\n    },\n    h: function h() {\n      return _H() % 12 || 12;\n    },\n    hh: function hh() {\n      return pad(_H() % 12 || 12);\n    },\n    H: function H() {\n      return _H();\n    },\n    HH: function HH() {\n      return pad(_H());\n    },\n    M: function M() {\n      return _M();\n    },\n    MM: function MM() {\n      return pad(_M());\n    },\n    s: function s() {\n      return _s();\n    },\n    ss: function ss() {\n      return pad(_s());\n    },\n    l: function l() {\n      return pad(_L(), 3);\n    },\n    L: function L() {\n      return pad(Math.floor(_L() / 10));\n    },\n    t: function t() {\n      return _H() < 12 ? i18n.timeNames[0] : i18n.timeNames[1];\n    },\n    tt: function tt() {\n      return _H() < 12 ? i18n.timeNames[2] : i18n.timeNames[3];\n    },\n    T: function T() {\n      return _H() < 12 ? i18n.timeNames[4] : i18n.timeNames[5];\n    },\n    TT: function TT() {\n      return _H() < 12 ? i18n.timeNames[6] : i18n.timeNames[7];\n    },\n    Z: function Z() {\n      return gmt ? \"GMT\" : utc ? \"UTC\" : formatTimezone(date);\n    },\n    o: function o() {\n      return (_o() > 0 ? \"-\" : \"+\") + pad(Math.floor(Math.abs(_o()) / 60) * 100 + Math.abs(_o()) % 60, 4);\n    },\n    p: function p() {\n      return (_o() > 0 ? \"-\" : \"+\") + pad(Math.floor(Math.abs(_o()) / 60), 2) + \":\" + pad(Math.floor(Math.abs(_o()) % 60), 2);\n    },\n    S: function S() {\n      return [\"th\", \"st\", \"nd\", \"rd\"][_d() % 10 > 3 ? 0 : (_d() % 100 - _d() % 10 != 10) * _d() % 10];\n    },\n    W: function W() {\n      return _W();\n    },\n    WW: function WW() {\n      return pad(_W());\n    },\n    N: function N() {\n      return _N();\n    }\n  };\n  return mask.replace(token, function (match) {\n    if (match in flags) {\n      return flags[match]();\n    }\n\n    return match.slice(1, match.length - 1);\n  });\n}\nexport var masks = {\n  default: \"ddd mmm dd yyyy HH:MM:ss\",\n  shortDate: \"m/d/yy\",\n  paddedShortDate: \"mm/dd/yyyy\",\n  mediumDate: \"mmm d, yyyy\",\n  longDate: \"mmmm d, yyyy\",\n  fullDate: \"dddd, mmmm d, yyyy\",\n  shortTime: \"h:MM TT\",\n  mediumTime: \"h:MM:ss TT\",\n  longTime: \"h:MM:ss TT Z\",\n  isoDate: \"yyyy-mm-dd\",\n  isoTime: \"HH:MM:ss\",\n  isoDateTime: \"yyyy-mm-dd'T'HH:MM:sso\",\n  isoUtcDateTime: \"UTC:yyyy-mm-dd'T'HH:MM:ss'Z'\",\n  expiresHeaderFormat: \"ddd, dd mmm yyyy HH:MM:ss Z\"\n};\nexport var i18n = {\n  dayNames: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"],\n  monthNames: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\", \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\n  timeNames: [\"a\", \"p\", \"am\", \"pm\", \"A\", \"P\", \"AM\", \"PM\"]\n};\n\nvar pad = function pad(val) {\n  var len = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n  return String(val).padStart(len, \"0\");\n};\n\nvar getDayName = function getDayName(_ref) {\n  var y = _ref.y,\n      m = _ref.m,\n      d = _ref.d,\n      _ = _ref._,\n      dayName = _ref.dayName,\n      _ref$short = _ref[\"short\"],\n      _short = _ref$short === void 0 ? false : _ref$short;\n\n  var today = new Date();\n  var yesterday = new Date();\n  yesterday.setDate(yesterday[_ + \"Date\"]() - 1);\n  var tomorrow = new Date();\n  tomorrow.setDate(tomorrow[_ + \"Date\"]() + 1);\n\n  var today_d = function today_d() {\n    return today[_ + \"Date\"]();\n  };\n\n  var today_m = function today_m() {\n    return today[_ + \"Month\"]();\n  };\n\n  var today_y = function today_y() {\n    return today[_ + \"FullYear\"]();\n  };\n\n  var yesterday_d = function yesterday_d() {\n    return yesterday[_ + \"Date\"]();\n  };\n\n  var yesterday_m = function yesterday_m() {\n    return yesterday[_ + \"Month\"]();\n  };\n\n  var yesterday_y = function yesterday_y() {\n    return yesterday[_ + \"FullYear\"]();\n  };\n\n  var tomorrow_d = function tomorrow_d() {\n    return tomorrow[_ + \"Date\"]();\n  };\n\n  var tomorrow_m = function tomorrow_m() {\n    return tomorrow[_ + \"Month\"]();\n  };\n\n  var tomorrow_y = function tomorrow_y() {\n    return tomorrow[_ + \"FullYear\"]();\n  };\n\n  if (today_y() === y && today_m() === m && today_d() === d) {\n    return _short ? \"Tdy\" : \"Today\";\n  } else if (yesterday_y() === y && yesterday_m() === m && yesterday_d() === d) {\n    return _short ? \"Ysd\" : \"Yesterday\";\n  } else if (tomorrow_y() === y && tomorrow_m() === m && tomorrow_d() === d) {\n    return _short ? \"Tmw\" : \"Tomorrow\";\n  }\n\n  return dayName;\n};\n\nvar getWeek = function getWeek(date) {\n  var targetThursday = new Date(date.getFullYear(), date.getMonth(), date.getDate());\n  targetThursday.setDate(targetThursday.getDate() - (targetThursday.getDay() + 6) % 7 + 3);\n  var firstThursday = new Date(targetThursday.getFullYear(), 0, 4);\n  firstThursday.setDate(firstThursday.getDate() - (firstThursday.getDay() + 6) % 7 + 3);\n  var ds = targetThursday.getTimezoneOffset() - firstThursday.getTimezoneOffset();\n  targetThursday.setHours(targetThursday.getHours() - ds);\n  var weekDiff = (targetThursday - firstThursday) / (864e5 * 7);\n  return 1 + Math.floor(weekDiff);\n};\n\nvar getDayOfWeek = function getDayOfWeek(date) {\n  var dow = date.getDay();\n\n  if (dow === 0) {\n    dow = 7;\n  }\n\n  return dow;\n};\n\nexport var formatTimezone = function formatTimezone(date) {\n  return (String(date).match(timezone) || [\"\"]).pop().replace(timezoneClip, \"\").replace(/GMT\\+0000/g, \"UTC\");\n};","map":null,"metadata":{},"sourceType":"module"}